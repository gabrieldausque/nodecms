# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
# this is a group variables to manage versioning number for all pipelines in the same repo
  - group: version_variables
  - name: semanticVersion
    value: $[counter(variables['semverPrefix'], 0)]

resources:
  containers:
    - container: mongo_teama
      image: mongo
      ports:
        - 27017:27017
      env:
        MONGO_INITDB_ROOT_USERNAME: admin_teama
        MONGO_INITDB_ROOT_PASSWORD: admin

pool:
  vmImage: 'ubuntu-latest'

services:
  mongo_teama: mongo_teama

steps:

- task: PowerShell@2
  displayName: Set Build Number
  inputs:
    targetType: inline
    script: |
      echo 'Starting Setting build Number'
      Write-host " - Current Build Number : $($env:BUILD_BUILDNUMBER)"
      Write-host " - Semantic Build Number : $($env:SEMVERPREFIX).$($env:SEMANTICVERSION).0"
      Write-host "##vso[build.updatebuildnumber]$($env:SEMVERPREFIX).$($env:SEMANTICVERSION).0"

- task: NodeTool@0
  displayName: Installing nodejs latest version
  inputs:
   versionSpec: '>=10.x'
   checkLatest: true

- task: Npm@1
  displayName: Install all Root dependencies
  inputs:
   command: install
- task: Npm@1
  displayName: Change version of all packages
  inputs:
   command: custom
   customCommand: run ver -- $(semverPrefix).$(semanticVersion)
   
- task: Npm@1
  displayName: Bootstrap project
  inputs:
    command: custom
    customCommand: run bootstrap

- task: Npm@1
  displayName: Launch build
  inputs:
    command: custom
    customCommand: run build

- task: Npm@1
  displayName: Run tests
  inputs:
    command: custom
    customCommand: run test

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/junit.xml'
    mergeTestResults: true
    testRunTitle: 'UI Jest tests'
  displayName: Publish tests results

- task: reportgenerator@4
  displayName: Merging cobertura files
  inputs: 
    reports: $(Build.SourcesDirectory)/**/coverage/cobertura-coverage.xml
    targetdir: $(Build.SourcesDirectory)/CoverageResults
    verbosity: Verbose

- task: PublishCodeCoverageResults@1
  condition: succeededOrFailed()
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/CoverageResults/Cobertura.xml'
  displayName: Publish code coverage

- task: Npm@1
  displayName: Backend npm publication
  condition: in(variables['Build.Reason'], 'Manual', 'Schedule')
  inputs:
    command: publish
    publishRegistry: useFeed
    publishFeed: Team A - Professional Network Tool/nodecms
    workingDir: $(Build.Repository.LocalPath)/packages/backend

- task: Npm@1
  displayName: Frontend npm publication
  condition: in(variables['Build.Reason'], 'Manual', 'Schedule')
  inputs:
    command: publish
    publishRegistry: useFeed
    publishFeed: Team A - Professional Network Tool/nodecms
    workingDir: $(Build.Repository.LocalPath)/packages/frontend

- task: UniversalPackages@0
  displayName: Publish backend assets to azure artifacts server
  condition: in(variables['Build.Reason'], 'Manual', 'Schedule')
  inputs:
    command: publish
    publishDirectory: $(Build.Repository.LocalPath)/packages/backend/dist
    vstsFeedPublish: Team A - Professional Network Tool/nodecms
    vstsFeedPackagePublish: nodecms-backend
    versionOption: custom
    versionPublish: $(semverPrefix).$(semanticVersion)
    packagePublishDescription:  Node CMS backend v0.X

- task: UniversalPackages@0
  displayName: Publish frontend assets to azure artifacts server
  condition: in(variables['Build.Reason'], 'Manual', 'Schedule')
  inputs:
    command: publish
    publishDirectory: $(Build.Repository.LocalPath)/packages/frontend/public
    vstsFeedPublish: Team A - Professional Network Tool/nodecms
    vstsFeedPackagePublish: nodecms-frontend
    versionOption: custom
    versionPublish: $(semverPrefix).$(semanticVersion)
    packagePublishDescription:  Node CMS backend v0.X
